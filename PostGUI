Fulll post er gui ta dewa ache,
img e double click e react,cmntshob kichu


import 'dart:async';
import 'package:animator/animator.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:fluttershare/pages/upload.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:fluttershare/models/user.dart';
import 'package:fluttershare/pages/activity_feed.dart';
import 'package:fluttershare/pages/comments.dart';
import 'package:fluttershare/pages/home.dart';
import 'package:fluttershare/widgets/custom_image.dart';
import 'package:fluttershare/widgets/progress.dart';
final _firestore=Firestore.instance.collection('users');
final postsRef=Firestore.instance.collection('posts');

class Post extends StatefulWidget {
  final String   postId;
  final String   ownerId;
  final String   description;
  final dynamic   likes;
  final String    location;
  final String   mediaUrl;
  final String  username;

  Post({this.postId,this.ownerId,this.description,this.likes,this.location,this.mediaUrl,this.username});
  factory Post.fromDocument(DocumentSnapshot doc){
    return Post(
        postId :doc['postId'],
        ownerId : doc['ownerId'],
        description : doc['description'],
        likes: doc['likes'],
        location:doc['location'],
        mediaUrl :doc['mediaUrl'],
        username:doc['username']
    );
  }
  int getLikes(likes){
    if(likes==null){
      return 0;
    }
    int count=0;
    likes.values.forEach((val){
      if(val==true)
        count+=1;
    });
    return count;
  }

  @override
  _PostState createState () => _PostState(
      postId: this.postId,
      ownerId: this.ownerId,
      description: this.description,
      likes: this.likes,
      location: this.location,
      mediaUrl: this.mediaUrl,
      likeCount: this.getLikes(this.likes),
      username: this.username
  );
}

class _PostState extends State<Post> {

  final String CurrentUserId=currentUser ?.id;
  final String postId;
  final String ownerId;
  final String description;
  Map likes;
  int likeCount;
  final String location;
  final String mediaUrl;
  final String  username;
  bool isLiked;
  bool showHeart=false;


  _PostState({this.postId,
    this.ownerId,this.description,this.likes
    ,this.location,this.mediaUrl,this.likeCount
    ,this.username});

  buildPostHeader(){
   // print(ownerId);
    return FutureBuilder(
      future: _firestore.document(ownerId).get(),
      builder: (context,snapshot){
        if(!snapshot.hasData)
          return circularProgress();

        User user=User.fromDocument(snapshot.data);
        bool isOwner = CurrentUserId == ownerId;
        
       // print('post 1');
        return ListTile(
          leading: CircleAvatar(
            backgroundColor: Colors.grey,
            backgroundImage: CachedNetworkImageProvider(user.photo),
            radius: 30,
          ),
          title: GestureDetector(
            onTap: (){
             // print('tap 2');
              showProfile(context,profile:ownerId);

            },
            child: Text(user.name,
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: Colors.black,
              ),
            ),
          ),
          subtitle: Text(location),
          trailing: isOwner? IconButton(icon: Icon(Icons.more_vert), onPressed: (){
            handleDeletePost(context);
          }): Text(''),

        );

      },
    );
  }
  deletePost()async{
    firestorePost.document(ownerId).collection('userPosts')
    .document(postId).get().then((doc){

      if(doc.exists)
        doc.reference.delete();
    });
    storageReference.child('post_$postId.jpg').delete();

    QuerySnapshot activitySnapshot=await feedRef
    .document(ownerId).collection('feedItems')
    .where('postId', isEqualTo: postId).getDocuments();

    activitySnapshot.documents.forEach((doc){
      if(doc.exists)
        doc.reference.delete();

    });

    QuerySnapshot commentQuerySnapshot=await commentRef.document(postId)
    .collection('comments').getDocuments();
    commentQuerySnapshot.documents.forEach((doc){
      if(doc.exists)
        doc.reference.delete();
    });
  }
  
  handleDeletePost(BuildContext parentContext){
    return showDialog(
      context: parentContext,
      builder: (context){
        return SimpleDialog(
          title: Text('Remove This Post'),
          children: <Widget>[
            SimpleDialogOption(
              onPressed: (){
                Navigator.pop(context);
                deletePost();
              },
              child: Text('Delete',
                style: TextStyle(
                  color: Colors.red,
                  fontWeight: FontWeight.bold
                ),
              ),
            ),
            SimpleDialogOption(
              onPressed: ()=>Navigator.pop(context),
              child: Text('Cancle',
                style: TextStyle(
                    color: Colors.black,
                    fontWeight: FontWeight.normal
                ),
              ),
            )
          ],
        );
      },
    );
  }

  handleLikePost(){

    bool _isLiked=likes[CurrentUserId]==true;

    if(_isLiked){
      postsRef.document(ownerId).collection('userPosts')
          .document(postId).updateData({
        'likes.$CurrentUserId':false
      });
      removeLikeFromActivityFeed();
      setState(() {
        likeCount -=1;
        isLiked=false;
        likes[CurrentUserId]=false;
      });
    }
    else if(!_isLiked){
      postsRef.document(ownerId).collection('userPosts')
          .document(postId).updateData({
        'likes.$CurrentUserId':true
      });
      addLiketoActivityFeed();

      setState(() {
        likeCount +=1;
        isLiked=true;
        likes[CurrentUserId]=true;
        showHeart=true;
      });
      Timer(Duration(milliseconds : 500),(){
        setState(() {
          showHeart=false;
        });
      });
    }

  }
  addLiketoActivityFeed(){
    bool isOwnReact;
    if(currentUser.id==ownerId)
      isOwnReact=true;
    else
      isOwnReact=false;
    if(!isOwnReact)
    {
      feedRef.document(ownerId).collection('feedItems')
          .document(postId).setData({
        'type':'like',
        'username':currentUser.name,
        'userId':currentUser.id,
        'userProfileImg':currentUser.photo,
        'postId':postId,
        'mediaUrl':mediaUrl,
        'timeStamp':dateTime,
        'ownerId':ownerId,
      });

    }


  }
  removeLikeFromActivityFeed(){
    bool isOwnReact;
    if(currentUser.id==ownerId)
      isOwnReact=true;
    else
      isOwnReact=false;

    if(!isOwnReact)
    {
      feedRef.document(ownerId).collection('feedItems')
          .document(postId).get().then((doc){
        if(doc.exists)
          doc.reference.delete();

      });
    }
  }
  buildPostImage(){
    return GestureDetector(
      onDoubleTap: handleLikePost,
      child: Stack(
        alignment: Alignment.center,
        children: <Widget>[
          // Image.network(mediaUrl),
          cachedNetworkImage(mediaUrl),

          showHeart ? Animator(
            duration: Duration(milliseconds: 300),
            tween: Tween(begin: 0.8, end: 1.4),
            curve: Curves.elasticOut,
            cycles: 0,
            builder: (anim)=>Transform.scale(
              scale:anim.value,
              child: Icon(Icons.favorite,size: 130,
                color: Colors.red.withOpacity(.20),
              ),
            ),) :  Text('')
        ],
      ),
    );
  }

  buildPostFooter(){
    return Column(
      children: <Widget>[
        Row(
          mainAxisAlignment: MainAxisAlignment.start,
          children: <Widget>[
            Padding(padding: EdgeInsets.only(top: 40,left: 20)),
            GestureDetector(
              child:  Icon( isLiked ? Icons.favorite  :Icons.favorite_border ,
                color: Colors.pink,
                size: 28,),
              onTap: handleLikePost,
            ),
            Padding(padding: EdgeInsets.only(right: 20),),
            GestureDetector(
              child: Icon(Icons.chat,color: Colors.blue[900],size: 28,),
              onTap: ()=> showComments(context,
                  postId:postId,
                  ownerId:ownerId,
                  mediaUrl:mediaUrl
              ),
            ),
          ],
        ),
        Row(
          children: <Widget>[
            Container(
              margin: EdgeInsets.only(left: 20),
              child: Text('$likeCount likes',
                style: TextStyle(
                    color: Colors.black,
                    fontWeight: FontWeight.bold
                ),
              ),
            )
          ],
        ),

        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            Container(
              margin: EdgeInsets.only(left: 20),
              child: Text('$username ',
                style: TextStyle(
                    color: Colors.black,
                    fontWeight: FontWeight.bold
                ),
              ),
            ),
            SizedBox(
              width: 3,

            ),
            Container(
              child: Text(description),
            )
          ],
        ),



      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    isLiked=(likes[CurrentUserId]==true);
  //  print('hello to all');
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: <Widget>[
        //Text('its post'),
        //
        buildPostHeader(),
        buildPostImage(),
        buildPostFooter(),
      ],

    );
  }
}

showComments(BuildContext context,{String postId,String ownerId,String mediaUrl}){
  Navigator.push(context, MaterialPageRoute(builder: (context){
    return Comments(
        postId:postId,
        ownerId:ownerId,
        mediaUrl:mediaUrl

    );
  }));

}
